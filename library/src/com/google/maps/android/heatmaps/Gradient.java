package com.google.maps.android.heatmaps;

import android.graphics.Color;
import android.view.animation.Interpolator;
import android.view.animation.LinearInterpolator;

import java.util.HashMap;

/**
 * A class to generate a color map from a given array of colors and the fractions
 * of the maximum value that the colors represent by interpolating between them.
 * This color map is to be used in the HeatmapTileProvider.
 */
public class Gradient {

    private class ColorInterval {
        private final int color1;
        private final int color2;

        /**
         * The period over which the color changes from color1 to color2.
         * This is given as the number of elements it represents in the colorMap.
         */
        private final float duration;

        public ColorInterval(int color1, int color2, float duration) {
            this.color1 = color1;
            this.color2 = color2;
            this.duration = duration;
        }
    }

    private static final int DEFAULT_COLOR_MAP_SIZE = 1000;

    /**
     * Size of a color map for the heatmap
     */
    public final int mColorMapSize;

    /**
     * A HashMap to associate each ColorInterval with the value they begin at on the colorMap
     */
    private HashMap<Integer, ColorInterval> mColorIntervals = new HashMap<Integer, ColorInterval>();

    /**
     * An interpolator to define the rate of change between defined colors.
     */
    public Interpolator mInterpolator;

    /**
     * Creates a Gradient with the given colors and starting points.
     * These are given as parallel arrays.
     * @param colors The colors to be used in the gradient
     * @param startPoints The starting point for each color, given as a percentage of the maximum intensity
     *                    This is given as an array of floats with values in the interval [0,1]
     */
    public Gradient(int[] colors, float[] startPoints) {
        this(colors, startPoints, DEFAULT_COLOR_MAP_SIZE);
    }

    /**
     * Creates a Gradient with the given colors and starting points which creates a colorMap of given size.
     * The colors and starting points are given as parallel arrays.
     * @param colors The colors to be used in the gradient
     * @param startPoints The starting point for each color, given as a percentage of the maximum intensity
     *                    This is given as an array of floats with values in the interval [0,1]
     * @param colorMapSize The size of the colorMap to be generated by the Gradient
     */
    public Gradient(int[] colors, float[] startPoints, int colorMapSize) {
        this(colors, startPoints, colorMapSize, new LinearInterpolator());
    }

    /**
     * Creates a Gradient with the given colors and starting points which creates a colorMap of given size,
     * and interpolates between them with the given interpolator
     * The colors and starting points are given as parallel arrays.
     * @param colors The colors to be used in the gradient
     * @param startPoints The starting point for each color, given as a percentage of the maximum intensity
     *                    This is given as an array of floats with values in the interval [0,1]
     * @param colorMapSize The size of the colorMap to be generated by the Gradient
     * @param interpolator An interpolator to adjust the rate of change between defined colors
     *                     E.g. new DecelerateInterpolator(2.0f);
     */
    public Gradient(int[] colors, float[] startPoints, int colorMapSize, Interpolator interpolator) {
        if (colors.length != startPoints.length) {
            throw new IllegalArgumentException("colors and startPoints should be same length");
        } else if (colors.length == 0) {
            throw new IllegalArgumentException("No colors have been defined");
        }
        for (int i = 1; i < startPoints.length; i++) {
            if (startPoints[i] <= startPoints[i-1]) {
                throw new IllegalArgumentException("startPoints should be in increasing order");
            }
        }
        mInterpolator = interpolator;
        mColorMapSize = colorMapSize;

        // Create first color if not already created
        // The initial color is transparent by default
        if (startPoints[0] != 0) {
            int initialColor = Color.argb(0, Color.red(colors[0]), Color.green(colors[0]), Color.blue(colors[0]));
            mColorIntervals.put(0, new ColorInterval(initialColor, colors[0], mColorMapSize * startPoints[0]));
        }
        // Generate color intervals
        for (int i = 1; i < colors.length; i++) {
            mColorIntervals.put(((int) (mColorMapSize * startPoints[i - 1])),
                    new ColorInterval(colors[i - 1], colors[i], (mColorMapSize * (startPoints[i] - startPoints[i - 1]))));
        }
        // Extend to a final color
        // If color for 100% intensity is not given, the color of highest intensity is used.
        if (startPoints[startPoints.length -1] != 1) {
            mColorIntervals.put(((int) (mColorMapSize * startPoints[startPoints.length - 1])),
                    new ColorInterval(colors[colors.length - 1], colors[colors.length-1], mColorMapSize * (1 - startPoints[startPoints.length-1])));
        }
    }

    /**
     * Generates the color map to use with a provided gradient.
     *
     * @param opacity  Overall opacity of entire image: every individual alpha value will be
     *                 multiplied by this opacity.
     * @return the generated color map based on the gradient
     */
    public int[] generateColorMap(double opacity) {
        int[] colorMap = new int[mColorMapSize];
        ColorInterval interval = mColorIntervals.get(0);
        int start = 0;
        for (int i = 0; i < mColorMapSize; i++) {
            if (mColorIntervals.containsKey(i)) {
                interval = mColorIntervals.get(i);
                start = i;
            }
            float ratio = (i - start) / interval.duration;
            colorMap[i] = interpolateColor(interval.color1, interval.color2, mInterpolator.getInterpolation(ratio));
        }
        if (opacity != 1) {
            for (int i = 0; i < mColorMapSize; i++) {
                int c = colorMap[i];
                colorMap[i] = Color.argb((int) (Color.alpha(c) * opacity),
                        Color.red(c), Color.green(c), Color.blue(c));
            }
        }

        return colorMap;
    }

    /**
     * Helper function for creation of color map - interpolates between given colors
     *
     * @param color1 First color
     * @param color2 Second color
     * @param ratio  Between 0 to 1. Fraction of the distance between color1 and color2
     * @return Color associated with x2
     */
    static int interpolateColor(int color1, int color2, float ratio) {

        int alpha = (int) ((Color.alpha(color2) - Color.alpha(color1)) * ratio + Color.alpha(color1));

        float[] hsv1 = new float[3];
        Color.RGBToHSV(Color.red(color1), Color.green(color1), Color.blue(color1), hsv1);
        float[] hsv2 = new float[3];
        Color.RGBToHSV(Color.red(color2), Color.green(color2), Color.blue(color2), hsv2);

        // adjust so that the shortest path on the color wheel will be taken
        if (hsv1[0] - hsv2[0] > 180) {
            hsv2[0] += 360;
        } else if (hsv2[0] - hsv1[0] > 180) {
            hsv1[0] += 360;
        }

        // Interpolate using calculated ratio
        float[] result = new float[3];
        for (int i = 0; i < 3; i++) {
            result[i] = (hsv2[i] - hsv1[i]) * (ratio) + hsv1[i];
        }

        return Color.HSVToColor(alpha, result);
    }

}
